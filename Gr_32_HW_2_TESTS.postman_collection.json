{
	"info": {
		"_postman_id": "b782b2d4-b9e8-49ab-bd90-9f2a77726f97",
		"name": "Gr_32_HW_2_TESTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24993774"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"var req = request.data;\r",
							"console.log(req)\r",
							"console.log(resp_name)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"name_type\", function () {\r",
							"    pm.expect(resp_name).to.be.a(\"string\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "roman",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/first?name=Roman&age=27&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"//7. Спарсить request.\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_age = +jsonData.age;\r",
							"var req = request.data;\r",
							"var req_age = + req.age;\r",
							"var req_name = req.name;\r",
							"var req_salary = + req.salary;\r",
							"console.log(\"Req_age = \" +req_age)\r",
							"console.log(\"Resp_age = \" + resp_age)\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp_name = jsonData.name;\r",
							"console.log(\"Resp_name = \", resp_name)\r",
							"pm.test(\"resp_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Roman\");\r",
							"});\r",
							"pm.test(\"resp_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(27);\r",
							"});\r",
							"var resp_salary = jsonData.salary;\r",
							"console.log(\"resp_salary = \",resp_salary)\r",
							"\r",
							"pm.test(\"Resp_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Req_resp_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"Req_resp_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Req_resp_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"var resp_family = jsonData.family;\r",
							"console.log(\"Resp_family = \" ,  resp_family)\r",
							"\r",
							"var resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"console.log(\"Resp_salary_1_5_year = \", resp_u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"Req_resp_salary_1_5_year\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Roman",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"1//2. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp_f = pm.response.json();\r",
							"console.log(resp_f);\r",
							"var req_f = pm.request.url.query.toObject();\r",
							"console.log(req_f);\r",
							"var req_name = req_f.name;\r",
							"console.log(req_name);\r",
							"var resp_name = resp_f.name;\r",
							"console.log(resp_name);\r",
							"\r",
							"pm.test(\"Resp_req_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"var resp_age = resp_f.age;\r",
							"var req_age = req_f.age;\r",
							"console.log(\"req_age = \", req_age)\r",
							"console.log(\"resp_age = \", resp_age)\r",
							"pm.test(\"Resp_req_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"var resp_family = resp_f.family;\r",
							"console.log(resp_family)\r",
							"\r",
							"pm.test(\"Name_dog\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age_dog\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name_dog\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"pm.test(\"Age_dog\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Roman&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp_f = pm.response.json();\r",
							"console.log(resp_f);\r",
							"var req_f = pm.request.url.query.toObject();\r",
							"console.log(req_f)\r",
							"\r",
							"pm.test(\"Resp_req_name\", function () {\r",
							"    pm.expect(resp_f.name).to.eql(req_f.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Resp_req_age\", function () {\r",
							"    pm.expect(resp_f.age).to.eql(+req_f.age);\r",
							"});\r",
							"console.log(resp_f.salary)\r",
							"console.log(req_f.salary)\r",
							"\r",
							"console.log(resp_f.salary[0])\r",
							"console.log(resp_f.salary[1])\r",
							"console.log(resp_f.salary[2])\r",
							"\r",
							"pm.test(\"Resp_req_salary\", function () {\r",
							"    pm.expect(resp_f.salary[0]).to.eql(+req_f.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Resp_req_salary\", function () {\r",
							"    pm.expect(+resp_f.salary[1]).to.eql(req_f.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Resp_req_salary\", function () {\r",
							"    pm.expect(+resp_f.salary[2]).to.eql(req_f.salary*3);\r",
							"});\r",
							"var arr = resp_f.salary\r",
							"console.log(arr [0,1,2])    "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Roman&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json\r",
							"\r",
							"var resp_f = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"var req_f = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Resp_have_start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Resp_have_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Resp_have_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Resp_have_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Resp_have_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Resp_have_person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Resp_start_qa_salary=req_salary\", function () {\r",
							"    pm.expect(resp_f.start_qa_salary).to.eql(+req_f.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Resp_qa_salary_after_6_months = req_salary\", function () {\r",
							"    pm.expect(resp_f.qa_salary_after_6_months).to.eql(+req_f.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Resp_qa_salary_after_12_months = req_salary\", function () {\r",
							"    pm.expect(resp_f.qa_salary_after_12_months).to.eql(+req_f.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let qa_salary_after_1_5_year = resp_f[\"qa_salary_after_1.5_year\"];\r",
							"console.log(qa_salary_after_1_5_year)\r",
							"\r",
							"pm.test(\"Resp_qa_salary_after_1.5_year = req_salary\", function () {\r",
							"    pm.expect(qa_salary_after_1_5_year).to.eql(req_f.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary_after_3_5_years = resp_f[\"qa_salary_after_3.5_years\"];\r",
							"console.log (qa_salary_after_3_5_years)\r",
							"\r",
							"pm.test(\"Resp_qa_salary_after_3.5_year = req_salary\", function () {\r",
							"    pm.expect(qa_salary_after_3_5_years).to.eql(req_f.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"1_u_name=salary_resp\", function () {\r",
							"    pm.expect(resp_f.person.u_name [1]).to.eql(+req_f.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"u_age=age_req\", function () {\r",
							"    pm.expect(resp_f.person.u_age).to.eql(+req_f.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years=salary_resp\", function () {\r",
							"    pm.expect(resp_f.person.u_salary_5_years).to.eql(+req_f.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"var obj_k = Object.keys(resp_f.person);\r",
							"var obj_v = Object.values(resp_f.person);\r",
							"for (var i = 0; i < obj_k.length; i += 1)\r",
							"    console.log(obj_k[i], obj_v[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age;\r",
							"var req = request.data\r",
							"var req_age = + req.age\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"console.log(\"req_url = \" , req_url.user_name)\r",
							"console.log(\"Req_url = \", req_url) \r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Roman",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data?user_name=Tom",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					],
					"query": [
						{
							"key": "user_name",
							"value": "Tom"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age;\r",
							"var req = request.data\r",
							"var req_age =  req.age\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"console.log(\"req_url = \" , req_url.user_name)\r",
							"console.log(\"Req_url = \", req_url) \r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"var req_raw_json = JSON.parse(pm.request.body.raw)\r",
							"console.log(\"req_raw = \" , req_raw_json.salary)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\": 27,\r\n\"salary\": 1000,\r\n\"name\": \"Roma\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_f = request.data\r",
							"let resp_f = pm.response.json()\r",
							"console.log(req_f)\r",
							"\r",
							"let req_age = +req_f.age\r",
							"let resp_age = +resp_f.age\r",
							"console.log(\"req_age = \" +req_age)\r",
							"console.log(\"resp_age = \" +resp_f.age)\r",
							"console.log(\"resp_age = \" + typeof resp_age)\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"let req_salary = +req_f.salary\r",
							"let resp_salary_1_5_year = resp_f.family.u_salary_1_5_year\r",
							"console.log(\"\" +resp_salary_1_5_year)\r",
							"\r",
							"pm.test(\"Check_salary_1_5_year\", function () {\r",
							"    pm.expect(req_salary*4).to.eql(resp_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Roman",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token\r",
							"\r",
							"console.log(resp_token)\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "roman",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123123123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}